name: Create and Publish NuGet Packages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - NomSol.Aspire.Defaults
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all tags for versioning

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Get latest Git tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo 'v0.0.0')
          echo "Latest tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: set_version
        run: |
          VERSION=${{ steps.get_tag.outputs.tag }}
          VERSION=${VERSION#v}  # Remove 'v' prefix
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}  # Default to 0 if not set
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          
          # Construct new version with pre-release label
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in .csproj
        run: |
          CSPROJ_PATH="./source/${{ matrix.project }}.csproj"
          if [ -f "$CSPROJ_PATH" ]; then
            sed -i "s|<Version>.*</Version>|<Version>${{ steps.set_version.outputs.new_version }}</Version>|" "$CSPROJ_PATH"
            echo "Updated version in $CSPROJ_PATH to ${{ steps.set_version.outputs.new_version }}"
          else
            echo "Error: $CSPROJ_PATH not found"
            exit 1
          fi

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ./source/${{ matrix.project }}.csproj

      - name: Build the project
        run: dotnet build ./source/${{ matrix.project }}.csproj --configuration Release --no-restore

      - name: Pack NuGet package
        run: |
          mkdir -p ./nupkgs/${{ matrix.project }}
          dotnet pack ./source/${{ matrix.project }}.csproj --configuration Release --no-build --output ./nupkgs/${{ matrix.project }}

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          dotnet nuget push ./nupkgs/${{ matrix.project }}/*.nupkg \
            --api-key $NUGET_API_KEY \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
